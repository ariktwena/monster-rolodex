{"version":3,"sources":["logo.svg","components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","className","alt","src","currentElement","id","name","email","CardList1","console","log","CardList2","children","CardList3","CardList","monstersFromAPI","map","key","SearchBox","placeholder","handleChange","type","onChange","App","event","target","value","setState","searchField","state","stringMessage","stringMessage1","monsters","fetch","then","response","json","responseUsers","this","filterMonsters","filter","toLowerCase","includes","logo","width","onClick","Component","customArray","newcustomArray1","newcustomArray2","newcustomArray3","index","array","customArray1","newCustomArray12","myPromise","Promise","resolve","reject","setTimeout","result","catch","rejectResult","error","defaultArray","defaultArray1","mapArray","object2","defaultArray3","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.42dce668.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","//Import React\nimport React from \"react\";\n\n//Import CSS\nimport './card.styles.css';\n\n\n//Export function Card that will return a <div>\nexport const Card = (props) => (\n    <div className='card-container'>\n        {/*Remember to use `` in the src!!*/}\n        <img alt='monster' src={`https://robohash.org/${props.currentElement.id}?set=set2&size=180x180`} />\n        <h2> {props.currentElement.name} </h2>\n        <p> {props.currentElement.email} </p>\n    </div>\n);\n\n\n\n\n","//Import react\nimport React from \"react\";\n\n//Import CSS\nimport './card-list.styles.css';\n\n//Import Card\nimport { Card } from '../card/card.component';\n\n\n//We export out the card-list component with \"props\"\n//Props is every component we add when we use it. Se the App.js file where we use the CardList\nexport const CardList1 = (props) => {\n    console.log('---');\n    console.log(props);\n    console.log('---');\n    return (<div>Hallo props</div>)\n};\n\n//We can also target children of props. This is what is between the tags <div> The children </div>\nexport const CardList2 = (props) => {\n    console.log('---');\n    console.log(props);\n    console.log(props.children);\n    console.log('---');\n    return (<div>{props.children}</div>)\n};\n\n//We add css to the component and target the children that comes from our API\nexport const CardList3 = (props) => {\n    return (<div className='card-list'>{props.children}</div>)\n};\n\n//We generate a CardList that includes the props and html\nexport const CardList = (props) => {\n    //We use \"map\" because it will be used on every element in the array, and will return a new array\n    //We give every element a uniq key, if we need to update a element\n    return (<div className='card-list'>\n        {props.monstersFromAPI.map(currentElement => (\n            <Card key={currentElement.id} currentElement={currentElement}/>\n        ))}\n    </div>)\n};\n\n\n\n\n\n","import React from \"react\";\nimport './search-box.styles.css';\n\n//We use components when we just want to render som HTML without a state or lifecycle\nexport const SearchBox = ({ placeholder, handleChange }) => (\n    <div>\n        {/*We make a dynamic search field with a dynamic function*/}\n        <input type={`search`} className='search' placeholder={placeholder} onChange={handleChange}/>\n    </div>\n)","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n//Import Card-list component\nimport { CardList1, CardList2, CardList3, CardList } from \"./components/card-list/card-list.component\";\n\n//Import search field\nimport { SearchBox } from \"./components/search-box/search-box.component\";\n\n//Class gives us access to the \"state\"\nclass App extends Component {\n\n    constructor() {\n        super();\n\n        //The state\n        this.state = {\n            stringMessage: 'Scroll down to see the monster app',\n            stringMessage1: 'Change this text by clicking',\n\n            //We make an array of monsters\n            monsters: [\n                {\n                    name: 'Frankenstein',\n                    id: 34\n                },\n                {\n                    name: 'Dracula',\n                    id: 55\n                },\n                {\n                    name: 'Zombie',\n                    id: '5hdf'\n                },\n            ],\n            monstersFromAPI: [],\n            searchField: '',\n\n        };\n\n        // for the handleChange to work, we need to point \"this\" to the state. We only use this when handleChange is NOT a arrow function\n        // this.handleChange = this.handleChange.bind(this);\n    }\n\n    //componentDidMount = when the component mounts on the page, it runs the code inside\n    componentDidMount() {\n\n        //We fetch() from an API, and that returns a promise with a response. We convert that response to JSON and then\n        //again return a promise with we call \"responseUsers\".\n        fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json()).then(responseUsers => {\n\n            //We can see the array we are getting in the console\n            console.log(responseUsers);\n\n            //We set the monstersFromAPI array in out state, to the data we get from our API call\n            this.setState({monstersFromAPI: responseUsers});\n\n        });\n    }\n\n    //Handle change method that we use in our search box\n    //In this format we have to bind \"this\" to the method\n    // handleChange(event){\n    //     //We console the value in the search field\n    //     console.log(event.target.value);\n    //\n    //     //We set the state to the search field value, and make a call back function to see the result in the console\n    //     //We use the call back function because the setState i asynchronous function, så the values can come faster then the function\n    //     this.setState({searchField: event.target.value}, () => console.log(this.state.searchField));\n    // }\n    //In the arrow function we can set \"this\", and we dont need to bind\n    handleChange = (event) => {\n        //We console the value in the search field\n        console.log(event.target.value);\n\n        //We set the state to the search field value, and make a call back function to see the result in the console\n        //We use the call back function because the setState i asynchronous function, så the values can come faster then the function\n        this.setState({searchField: event.target.value}, () => console.log(this.state.searchField));\n    }\n\n    //The html to show\n    render() {\n\n        //We are destructuring so we can convert state properties to constants\n        const {monstersFromAPI, searchField } = this.state;\n        //Now we filter the monsters that match the search field\n        const filterMonsters = monstersFromAPI.filter(monstersFromAPI => monstersFromAPI.name.toLowerCase().includes(searchField.toLowerCase()));\n\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <img src={logo} width=\"200px\" className=\"App-logo\" alt=\"logo\" />\n\n                    {/*From the state*/}\n                    <p>{this.state.stringMessage}</p>\n\n                    {/*From the state*/}\n                    <p>{this.state.stringMessage1}</p>\n\n                    {/*How to change value based on state*/}\n                    <button onClick={() => this.setState({stringMessage1: 'Booom... it is changed!'})}>Change text</button>\n\n                    {/*<p>*/}\n                    {/*    Edit <code>src/App.js</code> and save to reload.*/}\n                    {/*</p>*/}\n\n                    {/*<a*/}\n                    {/*    className=\"App-link\"*/}\n                    {/*    href=\"https://reactjs.org\"*/}\n                    {/*    target=\"_blank\"*/}\n                    {/*    rel=\"noopener noreferrer\"*/}\n                    {/*>*/}\n                    {/*    Learn React*/}\n                    {/*</a>*/}\n                </header>\n\n                {/*Monster app*/}\n                <div className=\"Monsters\">\n                    {/*We render javaScript betwen the {}*/}\n                    {\n\n                        //We use \"map\" because it will be used on every element in the array, and will return a new array\n                        //We give every element a uniq key, if we need to update a element\n                        this.state.monsters.map(currentElement => <h1 key={currentElement.id}> {currentElement.name} </h1>)\n\n                    }\n                </div>\n\n                {/*Monsters from API*/}\n                <div className=\"Monsters1\">\n\n                    {/*CardList component*/}\n                    <CardList1 name='Props'/>\n\n                    {/*Props children */}\n                    <CardList2 name='Parent prop'><h1>The child prop</h1></CardList2>\n\n                    {/*CardList that holds mosters with CSS*/}\n                    <CardList3 name='monsterGrid'>\n\n                        {/*We render javaScript betwen the {}*/}\n                        {\n\n                            //We use \"map\" because it will be used on every element in the array, and will return a new array\n                            //We give every element a uniq key, if we need to update a element\n                            this.state.monstersFromAPI.map(currentElement => (<h1 key={currentElement.id}> {currentElement.name} </h1>))\n\n                        }\n\n                    </CardList3>\n\n\n                    {/*Monster APP*/}\n                    <h1> Monsters Rolodex </h1>\n\n                    {/*Input element for the search field with a onChange function*/}\n                    {/*<input type={`search`} placeholder={`Search for monster`} onChange={event => {*/}\n\n                    {/*    //We console the value in the search field*/}\n                    {/*    console.log(event.target.value);*/}\n\n                    {/*    //We set the state to the search field value, and make a call back function to see the result in the console*/}\n                    {/*    //We use the call back function because the setState i asynchronous function, så the values can come faster then the function*/}\n                    {/*    this.setState({searchField: event.target.value}, () => console.log(this.state.searchField));*/}\n\n                    {/*}}/>*/}\n                    {/*We use aur created search component with the two props we created i the search box component (placeholder, handleChange) */}\n                    {/*handleChange is a method we created above render()*/}\n                    <SearchBox placeholder={`Search for monster`} handleChange={this.handleChange}/>\n                    {/*We move all the code to CardList*/}\n                    {/*we display monsters based on the search field and not the state*/}\n                    {/*<CardList monstersFromAPI={this.state.monstersFromAPI}/>*/}\n                    <CardList monstersFromAPI={filterMonsters}/>\n\n                </div>\n            </div>\n        );\n    }\n}\n\n//Function where we don't have access to the state, and it's more static\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\n/**\n *\n * Different Development concepts\n *\n */\n\n\n/**\n *\n *\n * Map()\n *\n */\n\nconst customArray = [1, 2, 3, 4];\nconsole.log(customArray);\n\n//If we want to increase the value of each value in the array, we use map() that will effect the value of every element in\n// the array trough a function, and return a new array. We use this instead of a forEach loop\nconst newcustomArray1 =  customArray.map((currentElement) => currentElement + 1);\nconsole.log(newcustomArray1);\n//If we want to change all the values to \"b\"\nconst newcustomArray2 =  customArray.map((currentElement) => 'b');\nconsole.log(newcustomArray2);\n//If we completely change only the element, we can use an anonymous function\nconst newcustomArray3 =  customArray.map(() => 'change');\nconsole.log(newcustomArray3);\nconsole.log('--------');\n//The info we can extract from map()\ncustomArray.map((currentElement, index, array) => {\n    console.log('Current element: ' +currentElement);\n    console.log('Index number: ' + index);\n    console.log('Array: ' + array);\n    return null;\n});\nconsole.log('--------');\n\n\n/**\n *\n * Filter\n *\n */\n\nconst customArray1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(customArray1);\n\n//Filter will return a new array based on true or false compared to the function we give each value in the array\nconst newCustomArray12 = customArray1.filter((currentElement) => currentElement > 5);\nconsole.log(newCustomArray12);\nconsole.log('--------');\n\n/**\n *\n * Promise\n *\n */\n\n//A new promise is initialized. A promise will only return a resolve or a reject value. The promise will wait\n    // until it get one of the values.\nconst myPromise = new Promise((resolve, reject) => {\n\n    //We set a test delay\n    setTimeout(() => {\n        //After 3 sec out promise now holds the resolve value. To access that value we need to run a result function\n        console.log('--------');\n        resolve('Everything is okay!');\n    }, 3000);\n\n});\n\n//A result function to get the value of the promise.\nmyPromise.then(result => console.log(result));\n\n//We can chain as many .then() to a result as we want, because each one will be a new promise\nmyPromise.then(result => result + '&').then(result => result + '?').then(result => result + '**').then(result => console.log(result));\n\n//To access the reject, for example a if statement. We don't need the reject, but it's good to have it, to debug API calls.\nconst myPromise1 = new Promise((resolve, reject) => {\n\n    const testValue = false;\n\n    if(testValue === true){\n\n        //We set a test delay\n        setTimeout(() => {\n            resolve('Everything is okay!');\n        }, 3000);\n\n    } else {\n\n        //The reject value\n        console.log('--------');\n        reject('This is the reject value');\n\n    }\n\n});\n\n//To view the reject value, we need to add an catch() to the function\nmyPromise1.then(result => console.log(result)).catch(rejectResult => console.log(rejectResult));\n\n//Fetch() is a promise\n//No error\nfetch('https://jsonplaceholder.typicode.com/users').then(response => response.json()).then(json => console.log(json)).catch(error => console.log(error));\n//With error\nfetch('htt://jsonplaceholder.typicode.com/ERROR').then(response => response.json()).then(json => console.log(json)).catch(error => console.log('Error with website'));\n\n\n/**\n *\n * Include()\n *\n */\n\n//We check to se if a element is included in an array\nconst defaultArray = [1, 2, 3, 4, 5];\nconsole.log('Is 3 in the array: ' + defaultArray.includes(3));\nconsole.log('Is 6 in the array: ' + defaultArray.includes(6));\nconsole.log('Is 3 in the array from index 2: ' + defaultArray.includes(3, 2));\nconsole.log('Is 3 in the array from index 3: ' + defaultArray.includes(3, 3));\n//Searching the whole element in the array\nconst defaultArray1 = ['Arik', 'Hans'];\nconsole.log('Is \"ri\" in the array: ' + defaultArray1.includes('ri'));\nconsole.log('Is \"Arik\" in the array: ' + defaultArray1.includes('Arik'));\n//Searching fragments of the array element\nconst mapArray = defaultArray1.map(currentElement => {\n    console.log(currentElement + ' incl. \"ri\": ' + currentElement.includes('ri'));\n})\nconsole.log(mapArray);\n//Searching objects\nconst defaultArray2 = [{id: 1}, {id: 3}];\nconsole.log('{id: 1} is in the array: ' + defaultArray2.includes({id: 1})); //False because we can't search objects this way\nconst object1 = {id: 1};\nconst object2 = {id: 2};\nconst defaultArray3 = [object1, object2];\nconsole.log('Object 2 is in the array: ' + defaultArray3.includes(object2)); //This is the way we search objects -> result is true\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}